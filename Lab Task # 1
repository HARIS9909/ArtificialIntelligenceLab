# Netflix Dataset Preprocessing and Cleaning
# Author: Haris Nasir

# Step 1: Import Libraries
import pandas as pd
import numpy as np

# Step 2: Load the Dataset
df = pd.read_csv(r'D:\PP TRY 2\netflix_titles.csv')
print("Dataset loaded successfully!")

# Step 3: Initial Inspection
print("\n--- Basic Info ---")
print("Shape:", df.shape)
print("\nColumns:", df.columns.tolist())
print("\nFirst 5 Rows:\n", df.head())
print("\nInfo:")
print(df.info())

# Step 4: Handle Missing Values
print("\n--- Handling Missing Values ---")
df['director'] = df['director'].fillna('Unknown')
df['cast'] = df['cast'].fillna('Unknown')
df['country'] = df['country'].fillna('Unknown')
df['rating'] = df['rating'].fillna('Unrated')
df['date_added'] = df['date_added'].fillna(method='ffill')  # forward-fill dates if possible

# Step 5: Clean Text Encoding and Trim Spaces
print("\n--- Cleaning Text Encoding and Whitespaces ---")
df = df.applymap(lambda x: x.encode('utf-8', 'ignore').decode('utf-8') if isinstance(x, str) else x)
df = df.applymap(lambda x: x.strip() if isinstance(x, str) else x)

# Step 6: Convert 'date_added' to Datetime Format
df['date_added'] = pd.to_datetime(df['date_added'], format='%d-%b-%y', errors='coerce')

# Step 7: Handle Duration Column
def extract_duration_value(value):
    if pd.isnull(value):
        return np.nan
    if 'Season' in str(value):
        return int(value.split()[0])
    elif 'min' in str(value):
        return int(value.split()[0])
    return np.nan

def extract_duration_type(value):
    if pd.isnull(value):
        return 'Unknown'
    if 'Season' in str(value):
        return 'Season'
    elif 'min' in str(value):
        return 'Minute'
    return 'Unknown'

df['duration_value'] = df['duration'].apply(extract_duration_value)
df['duration_type'] = df['duration'].apply(extract_duration_type)

# Step 8: Split Multi-Value Columns
df['cast_list'] = df['cast'].apply(lambda x: [i.strip() for i in str(x).split(',')])
df['country_list'] = df['country'].apply(lambda x: [i.strip() for i in str(x).split(',')])
df['genres'] = df['listed_in'].apply(lambda x: [i.strip() for i in str(x).split(',')])

# Step 9: Normalize Ratings
df['rating'] = df['rating'].replace({'UR': 'Unrated', 'NR': 'Unrated'})

# Step 10: Remove Duplicates
df.drop_duplicates(subset=['title', 'type'], inplace=True)

# Step 11: Detect and Handle Outliers (for numeric columns)
# (In this dataset, only duration_value is numeric)
q1 = df['duration_value'].quantile(0.25)
q3 = df['duration_value'].quantile(0.75)
iqr = q3 - q1
lower_bound = q1 - 1.5 * iqr
upper_bound = q3 + 1.5 * iqr
df['duration_value'] = np.where(
    (df['duration_value'] < lower_bound) | (df['duration_value'] > upper_bound),
    np.nan,
    df['duration_value']
)

# Step 12: Add Derived Columns
df['year_added'] = df['date_added'].dt.year
df['month_added'] = df['date_added'].dt.month_name()
df['is_movie'] = df['type'].apply(lambda x: 1 if x == 'Movie' else 0)

# Step 13: Reorder Columns for Clean Export
final_columns = [
    'show_id', 'type', 'title', 'director', 'cast', 'country',
    'release_year', 'rating', 'duration_value', 'duration_type',
    'genres', 'description', 'date_added', 'year_added', 'month_added', 'is_movie'
]
df = df[final_columns]

# Step 14: Save the Cleaned Dataset
df.to_csv("netflix_cleaned.csv", index=False)
print("\n Cleaned dataset saved successfully as 'netflix_cleaned.csv'!")

# Step 15: Summary
print("\n--- Cleaning Summary ---")
print("Remaining Missing Values:\n", df.isnull().sum())
print("\nFinal Shape:", df.shape)
print("\nSample Cleaned Data:\n", df.head(5))

